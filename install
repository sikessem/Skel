#!/usr/bin/env php
<?php

use Skel\Runtime\Installer;

const SKEL_PHAR = 'skel.phar';

const SKEL_SAPI = [
    'cli',
    'phpdbg'
];

require_once __DIR__ . '/cfg/boot.php';

function install(string $wdir, array $argv, int $argc, $input_stream, $output_stream, $error_stream): void {
    $phar_file = $argc > 1 && strpos($argv[1], '-') !== 0 ? $argv[1] : SKEL_PHAR;

    if (is_file($phar_file = $wdir . DIRECTORY_SEPARATOR . $phar_file) && !in_array('-y', $argv)) {
        fwrite($output_stream, "$phar_file already exists. Replace it (Y/n)? ");
        $response = '';
        while (!in_array($response, ['y', 'Y', 'n', 'N']))
            $response = fgetc($input_stream);
        if (in_array($response, ['n', 'N'])) exit;
        unlink($phar_file);
    }

    if (!in_array(PHP_SAPI, (array) SKEL_SAPI)) {
        fprintf($error_stream, '%s is not a PHP CLI setup' . PHP_EOL, PHP_BINARY);
        exit(1);
    }

    $installer = new Installer(__DIR__, 'skel.phar');
    $installer->setup($phar_file, stub(), \Phar::SHA512);
    unset($installer);
}

function stub(): string {
    $stub = <<<'EOF'
#!/usr/bin/env php
<?php

if (!class_exists('Phar')) {
    echo 'PHP\'s archive (Phar) extension is missing.' . PHP_EOL;
    exit(1);
}

Phar::mapPhar('skel.phar');

require 'phar://skel.phar/bin/skel';

__HALT_COMPILER();
EOF;
    return $stub;
}

install(getcwd(), $argv, $argc, STDIN, STDOUT, STDERR);